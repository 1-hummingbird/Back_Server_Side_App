#written in 2024-09-12

name: Build and Deploy

on:
  pull_request:
    types: [closed]
    branches: [ "dev" ]
  workflow_dispatch:

permissions:  
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: dev

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'
        
    ## create application-prod.yml
    - name: make application-prod.yml
      run: |
          mkdir -p ./src/main/resources
          cd ./src/main/resources
          touch ./application.yaml
          echo '${{ secrets.PROPERTIES_PROD }}' > ./application.yaml
      shell: bash
      
    # Configure Gradle for optimal use in GitHub Actions, including caching of downloaded dependencies.
    # See: https://github.com/gradle/actions/blob/main/setup-gradle/README.md
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0
      with:
        gradle-version: '8.9'

    ## gradle caching - 빌드 시간 향상
    - name: Gradle Caching
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-  
    
    - name: Build with Gradle 8.9
      run: gradle build -x test

    - name: Build Docker image
      run: docker build -t our-springapp:latest .

    - name: Save Docker image to file
      run: docker save our-springapp:latest -o our-springapp.tar

    - name: Create .ssh directory
      run: mkdir -p ~/.ssh

    - name: Add EC2 host to known_hosts
      run: ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts
    
    - name: Copy SSH key
      run: |
        echo "${{ secrets.EC2_SSH_KEY }}" > key.pem
        chmod 600 key.pem

    - name: Copy Docker image to EC2
      run: scp -i key.pem our-springapp.tar ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/home/${{ secrets.EC2_USER }}/our-springapp.tar


  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: main
        
    - name: Create .ssh directory
      run: mkdir -p ~/.ssh

    - name: Add EC2 host to known_hosts
      run: ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts
    
    - name: Copy SSH key
      run: |
        echo "${{ secrets.EC2_SSH_KEY }}" > key.pem
        chmod 600 key.pem

    ## deploy to EC2
    - name: Deploy to EC2
      uses: appleboy/ssh-action@master
      id: deploy-prod
      with:
        host: ${{ secrets.EC2_HOST }} # EC2 퍼블릭 IPv4 DNS
        username: ubuntu
        key: ${{ secrets.EC2_SSH_KEY }}
        envs: GITHUB_SHA
        script: |
          sudo docker ps
          sudo docker stop 1st-spring-spharos5th-6
          sudo docker rm 1st-spring-spharos5th-6
          sudo docker load -i /home/${{ secrets.EC2_USER }}/our-springapp.tar
          sudo docker run -d --name 1st-spring-spharos5th-6 -p 80:8080
          sudo docker image prune -f
